/* $Id$
 *
 * sems.conf.sample
 *
 * Sip Express Media Server (sems)
 *
 * sample configuration file
 */

// this is a C++-style one line comment
/*
 * This is a C-style multi-line comment
 */

/**********************************************************/
/* Modules configuration                                  */
/**********************************************************/
/* Configuration of plugin (module) loading:
 *
 * if module sections with name is set, only those are loaded.
 */
modules {

    /* optional parameter path
     * sets the path to the plug-ins' binaries
     * - may be absolute or relative to CWD
     *
     * default: /usr/lib/sems/plug-in
     */
    path = /usr/lib/sems/plug-in

    /* optional parameter config_path
     * in this path configuration files of the applications
     * (e.g. announcement.conf) are searched
     *
     * default: /etc/sems/etc/
     */
    config_path = /etc/sems/etc/

    /* module section
     *
     * describe name and load mode of plugin
     */
    module "bus_client" {
        /* optional parameter global
         * load these plugins with RTLD_GLOBAL (by default py_sems,
         * dsm, ivr, sbc, diameter_client, registrar_client, uac_auth)
         *
         * available values: true, false
         *
         * default: false
         */
        global = true
    }

    module "conference_mixer" {
        /* optional parameter global
         * load these plugins with RTLD_GLOBAL (by default py_sems,
         * dsm, ivr, sbc, diameter_client, registrar_client, uac_auth)
         *
         * available values: true, false
         *
         * default: false
         */
        global = true
    }
    module "mp3"{}
    module "opus"{}
    module "wav"{}
    module "gsm"{}
    module "ilbc"{}
    module "adpcm"{}
    module "l16"{}
    module "g722"{}
    module "sctp_bus"{}
    module "session_timer"{}
    module "uac_auth" {
        global = true
    }
    module "monitoring"{}
    module "registrar_client" {
        global = true
    }
    module "jsonrpc"{}
    module "http_client"{}
    module "dsm" {
        global = true
    }
}

/**********************************************************/
/* General configuration                                  */
/**********************************************************/
/* mandatory sections: general
 *
 * general parameters
 */
general {
    /* optional parameter: daemon
     *
     * specifies if sems should run in daemon mode (background)
     * (fork=no is the same as -E)
     *
     * available values: yes, no
     *
     * default: yes
     */
    daemon = yes

    /* optional parameters: deamon_uid, deamon_gid
     *
     * UID and GID in daemon mode
     *
     * default: empty
     */
    //deamon_uid = ""
    //deamon_gid = ""

     /* optional parameter: stderr
     *
     * debug mode: do not fork and log to stderr
     * (stderr=yes is the same as -E)
     *
     * available values: yes, no
     *
     * default: no
     */
    stderr = no

    /* optional parameter: syslog_loglevel
    *
    * sets log level (error=0, warning=1, info=2, debug=3)
    * (same as -D)
    *
    * available values: 0,1,2,3, error, warn, info, debug, no
    *
    * default: no
    */
    syslog_loglevel = 3

    /* optional parameter: syslog_facility
    *
    * sets the log facility that is used for syslog. Using this,
    * the log can for example be filtered into a special file
    * by the syslog daemon.

    * available values: DAEMON, USER, LOCAL[0-7]
    *
    * default: DAEMON
    */
    syslog_facility = LOCAL0

    /* optional parameter: max_shutdown_time
    *
    * Limit on server shutdown time (time to send/resend BYE
    * to active calls). 0 to disable (infinite).
    *
    * default: 10
    */
    max_shutdown_time = 10

    /* optional parameter: session_processor_threads
    *
    * controls how many threads should be created that
    * process the application logic and in-dialog signaling.
    * This is only available if compiled with threadpool support!
    * (set USE_THREADPOOL in Makefile.defs)
    *
    * default: 10
    */
    session_processor_threads = 1

    /* optional parameter: media_processor_threads
    *
    *  controls how many threads should be created that
    *  process media - on single-processor systems set this
    *  parameter to 1 (default), on MP systems to a higher value
    *
    * default: 10
    */
    media_processor_threads = 1

    /* optional parameter: sip_server_threads
     *
     * Number of SIP UDP receiver threads
     *
     * default: 4
     */
    sip_server_threads = 1

    /* optional parameter: signature
     *
     * use a Server/User-Agent header with a custom user agent
     * signature.
     * Overridden by default signature if
     * use_default_signature is set.
     * Set server_signature=0 in ser_sems.cfg if you use it.
     */
    signature = "Phone.Systems CORE node"

    /* optional parameter: use_raw_sockets
     *
     * use raw socket for udp transport
     * in SIP, RTP, RTSP stacks
     *
     * available values: yes, no
     *
     * default=no
     */
    use_raw_sockets = yes

    /* optional parameter: enable_rtsp
     *
     * enable rtsp protocol
     *
     * available values: yes, no
     *
     * default=no
     */
    enable_rtsp = yes

    /* optional parameter: pcap_upload_queue
     *
     * http_client destination name
     * which will be used to upload written pcap file if set
     *
     * no default
     */
    pcap_upload_queue = pcap

    /* optional parameter: force_symmetric_rtp
     *
     * NAT handling for RTP: force_symmetric_rtp
     *
     * Force comedia style "symmetric RTP" NAT handling, i.e.
     * learn remote RTP address from where RTP packets come from
     * (This option does not apply to the sbc module's RTP relay)
     *
     * available values: yes, no
     *
     * default: no
     */
    force_symmetric_rtp = yes

    /* optional parameter: 100rel
     *
     * support 100rel (PRACK) extension (RFC3262)?
     *
     * disabled - disable support for 100rel
     * supported - support it if remote end does, default
     * require - required
     *
     * available values: off, disabled, supported, require
     *
     * default: supported
     */
    100rel = disabled

    /* optional parameter: node_id
     *
     * unique identifier of the node in the cluster
     *
     * default: 0
     */
    node_id = 1

    /* optional section: session_limit
     *
     * Reply with configured <code>/<reason> for incoming INVITE requests
     * if active sessions count reached <limit>
     *
     */
    /*
    session_limit {
        limit = 0
        code = 503
        reason = "Server overload"
    }
    */

    /* optional section: options_session_limit
     *
     * reply with <code/reason for incoming OPTIONS requests
     * if active sessions count reached <limit>
     *
     */
    /*
    options_session_limit {
        limit = 0
        code = 503
        reason = "Server overload"
    }
    */

    /* optional section: cps_limit
     *
     * this sets a maximum calls per sec limit. If that limit is
     * reached, no further calls are accepted, but the error reply
     * with err code/reason is sent out.
     *
     * default: cps_limit = 0
     *          cps_limit_err_code = 503
     *          cps_limit_err_reason = "Server overload"
     */
    /*
    cps_limit {
        limit = 0
        code = 503
        reason = "Server overload"
    }
    */

    /* optional section: shutdown_mode
     *
     * configures code/reason which are used as reply to INVITE and OPTION
     * when SEMS is shutting down or in graceful shutdown mode
     *
     * allow_uac controls whether is allowed to start new UAC sessions in shutdown mode
     */
    /*
    shutdown_mode {
        code = 503
        reason = "Server shutting down"
        allow_uac = false
    }
    */

    /* optional parameter: default_bl_ttl
     *
     * TTL in milliseconds for entries in the temporary blacklist
     * by IP for unreachable destinations. use 0 to disable blacklisting.
     *
     * default: 60000 - 60s
     */
    //default_bl_ttl = 60000

    /* optional parameter: log_raw_messages
     *
     * Log raw messages
     *
     * available values: no, debug, info, warn, error
     *
     * default: debug
     */
    //log_raw_messages = debug

    /* optional parameter: log_parsed_messages
     *
     * Log parsed received messages
     *
     * available values: yes, no
     *
     * default: yes
     */
    //log_parsed_messages = yes

    /* optional parameter: log_parsed_messages
     *
     * SIP UDP socket receive buffer size (in bytes)
     * if not set, system default is used (which usually
     * is modest). set sytem wide upper limit with
     * e.g. sysctl -w net.core.rmem_max=8388608
     */
    //udp_rcvbuf = 8126

    /* optional parameter: log_dump_path
     *
     * Path where to dump buffer from di_log
     *
     * default: /var/spool/sems/logdump
     */
    //log_dump_path = /var/spool/sems/logdump

    /*  optional parameter: loglevel
     *
     *  sets log level (error=0, warning=1, info=2, debug=3)
     * (same as -D)
     *
     * available values: 0, 1, 2, 3, no, debug, info, warn, error
     *
     * default: info
     */
    //stderr_loglevel = 2

    /* optional parameter: rtp_receiver_threads
     *
     * controls how many threads should be created that
     * receive and relay RTP media - on single-processor systems set this
     * parameter to 1 (default), on MP systems to a higher value.
     *
     * default: info
     */
    //rtp_receiver_threads = 1

    /* optional parameter: outbound_proxy
     *
     * this sets an outbound proxy for dialogs and registrations initiated
     * by SEMS.  A preloaded Route header containing the uri is added to
     * each initial request.  The request is then sent to destination obtained
     * by resolving the uri. If outbound_proxy is not set (default setting),
     * no preloaded Route header is added and request is sent to destination
     * obtained by resolving r-uri.  Resolving is done by SIP stack with DNS
     * if uri contains domain name. Warning: If uri can not be resolved, no
     * requests will be sent out at all!
     *
     * default: empty
     */
    //outbound_proxy = ""

    /* optional parameter: force_outbound_proxy
     *
     * forces SEMS to set outbound_proxy for any requests (not just for
     * registrations and dialog initiating requests). See above what setting
     * of outbound_proxy means.  This option will only have an effect if the
     * outbound_proxy option has been set, and it will break 3261 compatibility
     * in some cases; better use next_hop.
     *
     * available values: yes, no
     *
     * default: no
     */
    //force_outbound_proxy = no

    /* optional parameter: force_outbound_if
     *
     * Use IP_PKTINFO to force use of the selected interface for sending
     * packets. Useful in situations with overlapping IP address spaces, when
     * the kernel routing table should not be used to determine the sending
     * interface.
     *
     * available values: yes, no
     *
     * default: yes
     */
    //force_outbound_if = no

    /* optional parameter: disable_dns_srv
     *
     * according to RFC, if no port is specified, destination IP address
     * should be resolved with a DNS SRV lookup. If SEMS should not do that
     * (only an A record lookup), set disable_dns_srv=yes.
     *
     * available values: yes, no
     *
     * default: no
     */
    //disable_dns_srv = no

    /* optional parameter: detect_inband_dtmf
     *
     * turn on inband dtmf detection
     *
     * available values: yes, no
     *
     * default: no
     */
    //detect_inband_dtmf = no

    /* optional parameter: sip_nat_handling
     *
     * NAT handling for SIP
     * Learn remote next hop address from the source of the address where
     * requests are received from.
     * This option does not apply to the sbc module.
     *
     * available values: yes, no
     *
     * default: no
     */
    //sip_nat_handling = no

    /* optional parameter: next_hop
     *
     * if this is set, all outgoing requests will be sent to
     * this address (IP address or domain name), regardless of R-URI etc.
     *
     * default: empty
     */
    //next_hop = ""

    /* optional parameter: next_hop_1st_req
     *
     * if set to yes, next_hop behavior (routing without pre-loaded route set)
     * applies only to initial request.  Subsequent requests are routed
     * normally based on route set learned from reply to initial request.
     *
     * available values: yes, no
     *
     * default: no
     */
    //next_hop_1st_req = no

    /* optional parameter: proxy_sticky_auth
     *
     * If enabled, host of request-URI of out-of-dialog requests that are
     * authenticated with SIP auth is changed to the previously resolved
     * next-hop IP:port.
     *
     * available values: yes, no
     *
     * default: no
     */
    //proxy_sticky_auth = no

    /* optional parameter: ignore_notify_lower_cseq
     *
     * May be necessary to interwork with simplistic/old SIP event notification
     * implementations
     *
     * available values: yes, no
     *
     * default: no
     */
    //ignore_notify_lower_cseq = no

    /* optional parameters: options_transcoder_out_stats_hdr, options_transcoder_in_stats_hdr
     *
     * Header containing the transcoder's codec statistics which should
     * be present in replies to OPTIONS requests
     *
     * default: empty
     */
    //options_transcoder_out_stats_hdr = ""
    //options_transcoder_in_stats_hdr = ""

    /* optional parameters: transcoder_out_stats_hdr, transcoder_in_stats_hdr
     *
     * Header containing the transcoder's outgoing codec statistics which should
     * be present in every message server
     *
     * default: empty
     */
    //transcoder_out_stats_hdr = ""
    //transcoder_in_stats_hdr = ""

    /* optional parameter: log_sessions
     *
     * If log_sessions=yes is set, INFO level log messages are generated
     * for each session when it is started and stopped.
     *
     * available values: yes, no
     *
     * default: no
     */
    //log_sessions = no

    /* optional parameter: log_events
     *
     * If log_eventy=yes is set, generic DBG level log messages are
     * generated for each event that is posted into an event queue.
     *
     * available values: yes, no
     *
     * default: no
     */
    //log_events = no

    /* optional parameter: max_forwards
     *
     * Value of Max-Forward header field for new requests
     *
     * default: 70
     */
    //max_forwards = 70

    /* optional parameter: dead_rtp_time
     *
     * if != 0, after this time (in seconds) of no RTP
     * a session is considered dead and stopped. If set
     * to 0 no check is done for rtp timeout.
     *
     * default: 300 - 5 minutes
     */
    //dead_rtp_time = 300

    /* optional parameter: dtmf_detector
     *
     * sets inband DTMF detector to use. spandsp support must be compiled in
     * for this to have effect if dtmf_detector=spandsp.
     *
     * available values: spandsp, internal
     *
     * default: spandsp
     */
    //dtmf_detector = spandsp

    /* optional parameter: single_codec_in_ok
     *
     * use single codec in 200 OK response
     *
     * available values: yes, no
     *
     * default: no
     */
    //single_codec_in_ok = no

    /* optional parameter: codec_order
     *
     * Codec order used when sending INVITE requests.  Codecs in codec_order
     * will be on the top of the list followed by other supported codecs
     * (if any).
     *
     * default: empty
     */
    //codec_order = {"iLBC","GSM"}

    /* optional parameter: exclude_payloads
     *
     * semicolon-separated list of payloads to exclude from loading
     * ('blacklist').
     *
     * default: empty
     */
    //exclude_payloads = {"PCMU","PCMA"}

    /* optional parameter: accept_forked_dialogs
     *
     * no - INVITE with existing callid+remote_tag is replied with 482.
     * yes - INVITE with existing callid+remote_tag+via_branch is replied with 482.
     *       Forked INVITEs (!= via-branch) are accepted.
     *
     * available values: yes, no
     *
     * default: no
     */
    //accept_forked_dialogs = no

    /* optional parameter: unhandled_reply_loglevel
    *
    * the default application logic implemented in the applications is to stop
    * the session right after sending BYE, without waiting for a reply. this
    * leads to many log entries of the form
    * ERROR: [b6fa6bb0] handleSipMsg (AmSipDispatcher.cpp:48): unhandled
    * reply:  [code:200;phrase:[OK];... ]
    *
    * This parameter sets the log lovel of unhandled positive (200 class) replies.
    *
    * available values: 0,1,2,3, error, warn, info, debug, no
    *
    * default: error
    */
    //unhandled_reply_loglevel = error

    /* optional parameters: sip_timers
     *
     * SIP timers configuration (in milliseconds)
     *
     * sip_timer_a=<n millisec>
     * sip_timer_b=<n millisec>
     * ...
     * sip_timer_m=<n millisec>
     *
     * timers A to J as in RFC3261.
     * Timer L: handle 200 ACKs automatically in INVITE client trans.
     * Timer M: cycle throught multiple addresses in case the R-URI
     *          resolves to multiple addresses
     *
     * Warning: Timer values are not checked whether they are appropriate!
     *          Leave to default values if in doubt.
     *
     * sip_timer_t2=<n millisec)   T2 timer configuration
     * (Cap for re-send request/response backoff)
     *
     * Warning: Timer values are not checked whether they are appropriate!
     *          Leave to default values if in doubt.
     *
     * default: sip_timer_a = 500 - 500 ms
     *          sip_timer_b = 64*500 - 32 s
     *          sip_timer_bl = sip_timer_b
     *          sip_timer_c = 3*60*1000 - 180 s
     *          sip_timer_d = sip_timer_b
     *          sip_timer_e = sip_timer_a
     *          sip_timer_f = sip_timer_b
     *          sip_timer_g = sip_timer_a
     *          sip_timer_k = 5000 - 5 s
     *          sip_timer_h = sip_timer_b
     *          sip_timer_i = sip_timer_k
     *          sip_timer_j = sip_timer_b
     *          sip_timer_l = sip_timer_b
     *          sip_timer_m = 64*500/4 - 8 s
     *          sip_timer_t2 = 4000 - 4 s
     *
     */
    //sip_timer_a = 500
    //sip_timer_b = 32000
    //sip_timer_d = 32000
    //sip_timer_e = 500
    //sip_timer_f = 32000
    //sip_timer_k = 5000
    //sip_timer_g = 500
    //sip_timer_h = 32000
    //sip_timer_i = 5000
    //sip_timer_j = 32000
    //sip_timer_l = 32000
    //sip_timer_m = 8000
    //sip_timer_c = 180000
    //sip_timer_bl = 32000
    //sip_timer_t2 = 4000

    /* optional parameter: resampling_library
     *
     * resampler implementation to use.
     *
     * available values: libsamplerate, unavailable, internal
     *
     * default: libsamplerate
     */
    //resampling_library = libsamplerate

    /* optional parameter: enable_zrtp
     *
     * enable ZRTP protocol
     *
     * available values: yes, no
     *
     * default: yes
     */
    //enable_zrtp = yes

    /* optional parameter: enable_zrtp_debuglog
     *
     * ZRTP debug logging
     *
     * available values: yes, no
     *
     * default: yes
     */
    //enable_zrtp_debuglog = yes
}

/**********************************************************/
/* Network configuration       shutdown_mode_err_reason                           */
/**********************************************************/
/*
 * mandatory sections: signaling-interfaces
 * at least one interface must be described
 * at least one of the sections ip4 or ip6 must be defined in the interface
 * at least one of the sections sip-udp, sip-tcp must be defined in ipv4 or ipv6 sections
 */
signaling-interfaces {
    interface "INPUT" {

        /* optional parameter default-media-interface
         *
         * binds the signaling interface to the media interface
         * If this attribute is specified, you need to describe this media interface
         */
        default-media-interface = "INPUT"

        /*
        * ip version of 4
        * use only ip version of 4 in address format
        */
        ip4 {
            /*
            * section described UDP transport for SIP stack
            */
            sip-udp {
                /* mandatory parameters address, port
                * ip and port where its SIP stack is
                * bound to or should be bound to.
                */
                address = 10.200.0.120
                port = 50600

                /* optional parameter public_address
                * when running SEMS behind certain simple NAT configurations,
                * you can use this parameter to inform SEMS of its public IP
                * address. If this parameter is set, SEMS will write this value
                * into SDP bodies.
                * If this parameter is not set, the local IP address is used.
                * N.B., there is no support for port translation; the local
                * RTP port is advertised in SDP in either case.
                */
                public_address = 195.138.65.189

                /* optional parameter use-raw-sockets
                *
                * use raw socket to send UDP packets (redefinition of general requirement)
                * if general requirement is disable use-raw-sockets must be off
                *
                * available values: on, off
                *
                * default: off
                */
                use-raw-sockets = on

                /* optional parameter force-via-address
                *
                * force sending replies to 1st Via
                *
                * available values: on, off
                *
                * default: off
                */
                force-via-address = on

                /* optional parameter static-contact-port
                *
                * use static client port and reused socket
                *
                * available values: on, off
                *
                * default: on
                */
                //force-contact-transport = on


                /* optional parameter dscp
                *
                * DiffServ Code Point value in ip protocol
                *
                * default: 0
                */
                dscp = 46
            }

            /*
            * section described TCP transport for SIP stack
            */
            sip-tcp {

                /* mandatory parameters address, port
                * ip and port where its SIP stack is
                * bound to or should be bound to.
                *
                * no default
                */
                address = 10.200.0.120
                port = 50600

                /* optional parameter static-contact-port
                *
                * use static client port and reused socket
                *
                * available values: on, off
                *
                * default: on
                */
                //force-contact-transport = on


                /* optional parameter connect-timeout
                *
                * tcp connect timeout
                *
                * default: 2000 - 2 seconds
                */
                connect-timeout = 1000

                /* optional parameter idle-timeout
                *
                * tcp idle timeout
                *
                * default: 3600000 - 1 hour
                */
                idle-timeout=900000

                /* optional parameter static-client-port
                *
                * use static client port and reused socket
                *
                * available values: on, off
                *
                * default: off
                */
                static-client-port = on
            }
        }

        /*
        * ip version of 6
        * use only ip version of 6 in address format
        */
        ip6 {

            /*
            * section described UDP transport for SIP stack
            */
            sip-udp {

                /* mandatory parameters address, port
                * ip and port where its SIP stack is
                * bound to or should be bound to.
                */
                address = 2a01:ad00:3:1:a11f:a42d:cf1e:a754
                port = 50600

                /* optional parameter static-contact-port
                *
                * use static client port and reused socket
                *
                * available values: on, off
                *
                * default: on
                */
                //force-contact-transport = on


                /* optional parameter force-via-address
                *
                * force sending replies to 1st Via
                *
                * available values: on, off
                *
                * default: off
                */
                force-via-address = on

                /* optional parameter use-raw-sockets
                *
                * use raw socket to send UDP packets (redefinition of general requirement)
                * if general requirement is disable use-raw-sockets must be off
                *
                * available values: on, off
                *
                * default: off
                */
                use-raw-sockets = on
            }

            /*
            * section described TCP transport for SIP stack
            */
            sip-tcp {

                /* mandatory parameters address, port
                 * ip and port where its SIP stack is
                 * bound to or should be bound to.
                 */
                address = 2a01:ad00:3:1:a11f:a42d:cf1e:a754
                port = 50600

                /* optional parameter static-client-port
                *
                * use static client port and reused socket
                *
                * available values: on, off
                *
                * default: off
                */
                static-client-port = on

                /* optional parameter static-contact-port
                *
                * use static client port and reused socket
                *
                * available values: on, off
                *
                * default: on
                */
                //force-contact-transport = on

                /* optional parameter connect-timeout
                *
                * tcp connect timeout
                *
                * default: 2000 - 2 seconds
                */
                connect-timeout = 1000

                /* optional parameter idle-timeout
                *
                * tcp idle timeout
                *
                * default: 3600000 - 1 hour
                */
                idle-timeout=900000 //optional
            }

            /*
            * section described TLS transport for SIP stack
            */
            sip-tls {

                /* mandatory parameters address, port
                 * ip and port where its SIP stack is
                 * bound to or should be bound to.
                 */
                address = 2a01:ad00:3:1:a11f:a42d:cf1e:a754
                port = 50601

                /* optional parameter static-client-port
                *
                * use static client port and reused socket
                *
                * available values: on, off
                *
                * default: off
                */
                static-client-port = on

                /* optional parameter static-contact-port
                *
                * use static client port and reused socket
                *
                * available values: on, off
                *
                * default: on
                */
                //force-contact-transport = on

                /* optional parameter connect-timeout
                *
                * tcp connect timeout
                *
                * default: 2000 - 2 seconds
                */
                connect-timeout = 1000

                /* optional parameter idle-timeout
                *
                * tcp idle timeout
                *
                * default: 3600000 - 1 hour
                */
                idle-timeout=900000 //optional

               /*
                * section described TLS client settings
                */
                client {
                    /* mandatory parameters protocols
                    *
                    * list of supported protocols
                    *
                    * available values: TLSv1, TLSv1.1, TLSv1.2
                    */
                    protocols =  { TLSv1, TLSv1.1, TLSv1.2 }

                    /* optional parameters certificate
                    *
                    * path to client certificate
                    */
                    certificate = /etc/sems/client.crt

                    /* optional parameters certificate_key
                    *
                    * path to client certificate key
                    */
                    certificate_key = /etc/sems/client.crt

                    /* optional parameters verify_certificate_cn
                    *
                    * whether to check server certificate
                    *
                    * available values: true, false
                    *
                    * default: true
                    */
                    verify_certificate_chain = true

                    /* optional parameter verify_certificate_cn
                    *
                    * whether to check common name of server certificate
                    *
                    * available values: true, false
                    *
                    * default: true
                    */
                    verify_certificate_cn = true

                    /* optional parameters ca_list
                    *
                    * path to ca certificates
                    */
                    ca_list = /etc/sems/ca/ca.crt
                }

                /*
                * section described TLS server settings
                */
                server {
                    /* mandatory parameters protocols
                    *
                    * list of supported protocols
                    *
                    * available values: TLSv1, TLSv1.1, TLSv1.2
                    */
                    protocols =  { TLSv1, TLSv1.1, TLSv1.2 }

                    /* mandatory parameters certificate
                    *
                    * path to server certificate
                    */
                    certificate = /etc/sems/client.crt

                    /* mandatory parameters certificate_key
                    *
                    * path to server certificate key
                    */
                    certificate_key = /etc/sems/client.crt

                    /* optional parameters ciphers
                    *
                    * list of supported ciphers
                    *
                    * available values: EECDH, ECDSA, AESGCM ....
                    */
                    ciphers = {ChaCha20Poly1305, AES-256/GCM, AES-128/GCM, AES-256/CCM, AES-128/CCM, AES-256, AES-128}

                    /* optional parameters require_client_certificate
                    *
                    * whether to require client certificate
                    *
                    * available values: true, false
                    *
                    * default: true
                    */
                    require_client_certificate = true

                    /* optional parameters verify_certificate_cn
                    *
                    * whether to check client certificate
                    *
                    * available values: true, false
                    *
                    * default: true
                    */
                    verify_client_certificate = true

                    /* optional parameter dhparam
                    *
                    * not using now
                    */
                    //dhparam = ECDH

                    /* optional parameters ca_list
                    *
                    * path to ca certificates
                    */
                    ca_list = /etc/sems/ca/ca.crt
                }
            }
        }
    }
}

/*
 * mandatery sections: media-interfaces
 * at least one interface must be described
 * at least one of the sections ip4 or ip6 must be defined in the interface
 * at least one of the sections rtp, rtsp must be defined in ipv4 or ipv6 sections
 */
media-interfaces {
    interface "INPUT"{

        /*
        * ip version of 4
        * use only ip version of 4 in address format
        */
        ip4 {

            /*
            * section described RTP transport parameters
            */
            rtp {
                /* mandatory parameter address
                 * ip where its RTP stack is
                 * bound to or should be bound to.
                 */
                address = 10.200.0.120

                /* mandatory parameters low-port, high-port
                 *
                 * limits the allocation of ports within the lower boundary and the upper boundary
                 */
                low-port = 16384
                high-port = 32767

                /* optional parameter dscp
                *
                * DiffServ Code Point value in ip protocol
                *
                * default: 0
                */
                dscp = 46

                /* optional parameter use-raw-sockets
                *
                * use raw socket to send UDP packets (redefinition of general requirement)
                * if general requirement is disable use-raw-sockets must be off
                *
                * available values: on, off
                *
                * default: off
                */
                use-raw-sockets=on
            }

            /*
            * section described RTSP protocol parameters
            */
            rtsp {

                /* mandatory parameter address
                 * ip where its RTSP stack is
                 * bound to or should be bound to.
                 */
                address = 10.200.0.120

                /* mandatory parameters low-port, high-port
                 *
                 * limits the allocation of ports within the lower boundary and the upper boundary
                 */
                low-port = 16384
                high-port = 32767
            }

        }

        /*
        * ip version of 6
        * use only ip version of 6 in address format
        */
        ip6 {

            /*
            * section described RTP transport parameters
            */
            rtp {

                /* mandatory parameter address
                 * ip where its RTP stack is
                 * bound to or should be bound to.
                 */
                address = 2a01:ad00:3:1:a11f:a42d:cf1e:a754

                /* mandatory parameters low-port, high-port
                 *
                 * limits the allocation of ports within the lower boundary and the upper boundary
                 */
                low-port = 16384
                high-port = 32767

                /* optional parameter dscp
                *
                * DiffServ Code Point value in ip protocol
                *
                * default: 0
                */
                dscp = 46

                /* optional parameter use-raw-sockets
                *
                * use raw socket to send UDP packets (redefinition of general requirement)
                * if general requirement is disable use-raw-sockets must be off
                *
                * available values: on, off
                *
                * default: off
                */
                use-raw-sockets = on
            }
        }
    }
}

/**********************************************************/
/* Routing configuration                                  */
/**********************************************************/
/*
 * mandatory sections: routing
 * This controls which application is to be executed for incoming calls
 * is no explicit application requested (outgoing calls)
 *
 * This can be one of
 *    $(ruri.user)       - user part of ruri is taken as application,
 *                         e.g. sip:announcement@host
 *    $(ruri.param)      - uri parameter "app", e.g.
 *                         sip:joe@host.net;app=announcement
 *    $(apphdr)          - the value of the P-App-Name header is used
 *
 *    $(mapping)         - regex=>application mapping is read from
 *                         app_mapping.conf (see app_mapping.conf)
 *    <application name> - application name configured here, e.g.
 *                         application=announcement
 *
 * examples:
 * application = conference
 * application = $(mapping)
 * application = $(ruri.user)
 * application = $(ruri.param)
 */
routing {
    application=test
}
